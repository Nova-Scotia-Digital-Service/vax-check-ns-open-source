<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppName" xml:space="preserve">
    <value>VaxCheckNS</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>VaxCheckNS</value>
  </data>
  <data name="NewScanButtonText" xml:space="preserve">
    <value>New Scan</value>
  </data>
  <data name="ScanButtonText" xml:space="preserve">
    <value>Scan Code</value>
  </data>
  <data name="ScanErrorMessage" xml:space="preserve">
    <value>Unable to Confirm</value>
  </data>
  <data name="ScanErrorTitleText" xml:space="preserve">
    <value>Sorry!</value>
  </data>
  <data name="ScanSuccessDetailText" xml:space="preserve">
    <value>Thank you</value>
  </data>
  <data name="ScanSuccessTitleText" xml:space="preserve">
    <value>Confirmed!</value>
  </data>
  <data name="ViewGuideButtonText" xml:space="preserve">
    <value>View Guidelines</value>
  </data>
  <data name="VaccineCodeInvalidText" xml:space="preserve">
    <value>Does not meet public health guidelines</value>
  </data>
  <data name="VaccineDateInvalidText" xml:space="preserve">
    <value>Does not meet public health guidelines</value>
  </data>
  <data name="VaccineDosageInvalidText" xml:space="preserve">
    <value>Does not meet public health guidelines</value>
  </data>
  <data name="FhirFormatInvalidText" xml:space="preserve">
    <value>Invalid QR code</value>
  </data>
  <data name="InvalidScanText" xml:space="preserve">
    <value>Invalid QR code</value>
  </data>
  <data name="AboutMenuTitle" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutPageContent" xml:space="preserve">
    <value>VaxCheckNS Vaccine Card Verifier is the official mobile application from the Government of Nova Scotia for businesses to verify Nova Scotia Vaccine Cards.

The app allows businesses to validate the COVID-19 vaccination status from Nova Scotia issued vaccination records by scanning a QR code. Once scanned the app will show whether a resident has met the conditions by showing a green or red status.</value>
  </data>
  <data name="AboutPageTitle" xml:space="preserve">
    <value>About this App</value>
  </data>
  <data name="FAQMenuTitle" xml:space="preserve">
    <value>FAQ</value>
  </data>
  <data name="FeedbackMenuTitle" xml:space="preserve">
    <value>Feedback</value>
  </data>
  <data name="GuideMenuTitle" xml:space="preserve">
    <value>Guidelines</value>
  </data>
  <data name="HomeMenuTitle" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="ScanMenuTitle" xml:space="preserve">
    <value>New Scan</value>
  </data>
  <data name="TermsMenuTitle" xml:space="preserve">
    <value>Terms of Use</value>
  </data>
  <data name="PrivacyTitle" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="VaccineInvalidSHCCodeText" xml:space="preserve">
    <value>Could not validate issuer</value>
  </data>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AcceptButtonText" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="DeclineButtonText" xml:space="preserve">
    <value>Decline</value>
  </data>
  <data name="FAQPageTitle" xml:space="preserve">
    <value>Frequently Asked Questions</value>
  </data>
  <data name="FAQ1Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="FAQ2Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="FAQ3Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="FAQ4Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="FAQ5Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="FAQ6Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vitae gravida metus. Vestibulum elit quam, placerat ut sollicitudin luctus, consectetur in nibh. Donec sem turpis, pulvinar ac ligula quis, fringilla rhoncus enim.</value>
  </data>
  <data name="Tutorial1Text" xml:space="preserve">
    <value>Ask patron to present proof of vaccination record</value>
  </data>
  <data name="Tutorial2Text" xml:space="preserve">
    <value>Tap 'Scan Code' button</value>
  </data>
  <data name="Tutorial3Text" xml:space="preserve">
    <value>Position QR code in center of the screen</value>
  </data>
  <data name="Tutorial4Text" xml:space="preserve">
    <value>View scan results</value>
  </data>
  <data name="TutorialSkipText" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="TutorialDoneButtonText" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="TermsOfUseContentText" xml:space="preserve">
    <value>The Province makes no warranties of any kind whatsoever to VaxCheckNS users, expressed or implied.  This includes any representations or warranties with respect to the accuracy, completeness, merchantability or fitness for a particular purpose of VaxCheckNS or of any vaccination data contained therein. All such data is for information purposes only.  Where there is any conflict between any data, information or document available electronically through VaxCheckNS and any information, data or document available in physical form, the information, data or document in physical form prevails.

In addition, the Province specifically makes no warranties that access to VaxCheckNS or any content or information obtained from or through the use of VaxCheckNS will be provided on an uninterrupted, timely, secure or error-free basis, or that it will meet users’ requirements or expectations.

Users of VaxCheckNS hereby agree that the Province will not be liable to any user or other person or entity for any direct, indirect or consequential damages whatsoever as a result of using VaxCheckNS, or as a result of relying on any vaccination data or other information that is provided to users by VaxCheckNS. Users assume all risk associated with their access to, use of, and reliance upon VaxCheckNS and any vaccination data contained therein. As such, each user of VaxCheckNS agrees to defend, indemnify and hold harmless the Province, and the Province’s officers, employees and agents, from and against any and all claims, damages, obligations, losses, liabilities, costs, debt, or expenses (including but not limited to legal fees) arising from: (1) users’ access to and use of VaxCheckNS; and (2) users’ violation of any term or condition contained in VaxCheckNS’s accompanying Privacy Policy.</value>
  </data>
  <data name="PrivacyContentText" xml:space="preserve">
    <value>VaxCheckNS is the official mobile application from the Government of Nova Scotia for verification of the Nova Scotia Proof of Vaccination QR (Quick Response) code.&#x00B9;

Businesses and organizations are encouraged to review the Public Health COVID-19 protocol for vaccine verification.

When a patron consents to provide their QR code for scanning, VaxCheckNS allows businesses and organizations to view a patron’s proof of vaccination status.

VaxCheckNS requires access to a business’s or organization’s scanning device’s camera to scan the QR code.   On scanning a valid QR code, VaxCheckNS will show whether a patron is fully or partially vaccinated. VaxCheckNS will display the vaccination status along with the name of the patron. Verification is done locally on the scanning device without connecting to the internet.  No personal health information or personal information from the QR code is stored in VaxCheckNS or transmitted outside of the Mobile Verifier.

VaxCheckNS leverages Microsoft Application Center Diagnostics and Analytics to collect limited non-personal and de-identified diagnostic and usage data for support purposes. While offline, this data may be temporarily cached on the scanning device prior to it being transmitted. Diagnostic and usage data captured includes:

Scanning device Information such as device type, and Operating System (OS) information
De-identified usage data including daily sessions per device, session duration and language
Details for QR code failure scenarios including the issuer of the QR code (e.g. Province, Country) and reason for failure (e.g. does not meet public health guidelines, invalid QR code)
Application code details triggered by unexpected errors.
VaxCheckNS will periodically check for updated vaccine protection rules.    An offline, built-in computer process will present a warning message if the scanning device is unable to check for updates after seven days.   To ensure that the guidelines and technical requirements are kept up to date, businesses and organizations are asked to connect their scanning device(s) to the internet to complete the update.

The Nova Scotia Personal Health Information Act (PHIA) prevents businesses and organizations from keeping records about patron’s health unless the patron provides informed consent.   The Personal Information Protection and Electronic Documents Act (PIPEDA) additionally requires businesses and organizations involved in commercial activities to protect a patron’s privacy and only collect personal information with the patron’s consent.  It is important to note that if businesses and organizations fail to comply with the Public Health Order and noted privacy legislation, financial penalties and legal action may result.

For additional information on personal health information protection  or privacy-related matters, please forward enquiries to PHIA@novascotia.ca.  

&#x00B9; Quick Response (QR) code is a machine-readable code consisting of an array of black and white squares, typically used for storing URLs or other information for reading by the camera on a smartphone.</value>
  </data>
  <data name="PermissionsTitle" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="PermissionsContent1Text" xml:space="preserve">
    <value>VaxCheckNS requires the camera to scan QR codes. Please accept camera permissions to continue.</value>
  </data>
  <data name="PermissionsContent2Text" xml:space="preserve">
    <value>If permissions are denied, you can enable from the app settings.</value>
  </data>
   <data name="PermissionsOpenSettingText" xml:space="preserve">
    <value>Open App Settings</value>
  </data>
</root>